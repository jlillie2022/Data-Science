{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "gKE6o4E421W5",
        "Pl903fbxyVIT",
        "xAVcObs63TKg"
      ],
      "authorship_tag": "ABX9TyM6OI3RTRXhQ6hZhIXCUP+a",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jlillie2022/Data-Science/blob/main/stats_notebook_lab_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#lab 1 notebook"
      ],
      "metadata": {
        "id": "gKE6o4E421W5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "2+2 #basic math equation addition"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GehsjsCTxNUF",
        "outputId": "47c265f0-abad-4347-90f3-23c18fcd375a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "2*24 #basic multiplication"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLNQl9FzxZNf",
        "outputId": "3224a6b8-e9dc-486a-e91f-a90fde3fade2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "48"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "2**8 #how to sqaure a number"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EzsRrAmuxd3D",
        "outputId": "f9d9232b-d5fe-4a0d-f3eb-2a531bb2eea9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "256"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "2**12345 #sqaure a number by a number"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C4w4f7n-xgDj",
        "outputId": "a464b5d3-52ee-42df-d387-97bb7fe4fbb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "164171010688258216356020741663906501410127235530735881272116103087925094171390144280159034536439457734870419127140401667195510331085657185332721089236401193044493457116299768844344303479235489462436380672117015123283299131391904179287678259173308536738761981139958654880852234908448338817289014166774169869251339379828599748492918775437864739032217778051333882990074116246281269364933724892342134504702491040016637557429810893780765197418589477584716543480995722533317862352141459217781316266211186486157019262080414077670264642736018426998113523445732680856144329876972273300703392584997729207197971083945700345494092400147186997307012069454068489589035676979448169848060836924945824197706493306108258511936030341393221586423523264452449403781993352421885094664052270795527632721896121424813173522474674395886155092203404036730748474781710715745446135468098139831824083259647919175273503681561172684624283384438504776503000432241604550454374116320822227191911322123484085063926350606342197146407841178028071147192533942517270553513988142925976090769695456221159699052583533011331652079347093098173086975483539274464023357456484465482927479569437320368592222760278170306076733438801098370797675711274671054970711442158930561684343135774118741594506702833147396758825015850042983343690345185995956235143825771620543546030664562647854656431302644574119873820215595718618624485232422006575550007068883734241454686368856734496265385908809403972494685137741122866896719678053937285818409751670320140501843039224040735870096889596273419106389103662095318937990625980136711988237421962315266686856089505981438440850638067589321141759499017023839596858455548192000140085142294166987063499024792681334843159790936321351919859758669569200541507612099780909705198902176026219872201715422096090343686272984351441594569506778041062663266799342793856313801540959815845788584759033248828248561586450271172777240971795656082001848115815260930521663167480173886064019118572778281516735157779555888167787064432558595410843987446497881666288423233170060413025924629950477303342180149398926073618582715358742250388958231281694757980523791263699450732952325727664209947786063982561775327638504516918570101319391698412388607603742484414748268389669129118026878969735782286841116842656410574647607524418900720328045377993386279808768990376289424757351052369393977137871998119168898493037938756635621557623138404459266598837784229325799838782026060481496865561757031839002257091802876949248392744175669112242088439883248336310597001257385980776961529351198877747193531054956881808332177946751404038228718567911769630971553915410012677600002457982207465176670752102117002773980548089696530972476439694599881281812973217265853884727906535479745854085338851105144585481994156206497436745899944877732531412541279014300324594890623941145509856940982863769834430048120562966797907114102689879364945689860493474954538422367719507882513166051007352994068319251450666676648368200564329382998758875760414259654004977261309988267319806354856051784553990936610634733375984159028722378614984450255386315585631994503350002142910493190254825610707400589976364985748467955131077971641882672895854571236368282811336220769174784720113331269084746524204124263475054112841630933586166195036115696469686075600480420563557567616835633252622327172811002146392754445051182169805284630259703542633955126179520113059629914229833688535925729676778028406897316106101038469119090984567152591962365415039646394591503830797626339246986057077758611413664914168745375266786298141171496573941614387744125843685677063619782918759823106021054037757857761587472240835040580447360544029064930412569943169729238102162312218687930203068055400275795180972382856696655279408212344832"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# this is a comment"
      ],
      "metadata": {
        "id": "GO-wugsDxlJ7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "8/4 #divison with decimal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9e3Hm-RLxygI",
        "outputId": "687f0f10-f9ae-49ea-b1d4-1a5ad07b4312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.0"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "8//4 #divison with whole number"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKLbdlACx88C",
        "outputId": "c150018a-910f-4c7c-859b-90a18329831b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "22%12 #remainder"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sARcFiAux_da",
        "outputId": "51a76365-5108-4c3f-8ff7-f828dd6af17a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# variables"
      ],
      "metadata": {
        "id": "Pl903fbxyVIT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "apples=5 #making a variable a number"
      ],
      "metadata": {
        "id": "P1-pQqH6yhAC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "apples "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLu-yPIVyklR",
        "outputId": "402646f7-30c5-4590-ee54-398010fbc886"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oranges=8 #making another variable a number"
      ],
      "metadata": {
        "id": "7HKnyr0Uyo-x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "apples+oranges #adding 2 variables together"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7yzM5Locyvsa",
        "outputId": "1e467ec8-fa39-4d18-9daf-c3f0f6883e63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total=apples+oranges #making total a variable"
      ],
      "metadata": {
        "id": "m92tBui8yy4b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TPIVOtC8y9u6",
        "outputId": "588ab9fc-8e15-4ff3-d3bb-9078bd773e87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "apples**2 #apples squared"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OVZjHrZ7za2r",
        "outputId": "a5828395-f8bb-48a7-eff9-b617e293d321"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cost_per_apple=.25 #switching a varaible to a cost"
      ],
      "metadata": {
        "id": "DpNh7ooDzmDz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_apple_cost=apples*cost_per_apple #taking cost and apples multiplyed to get total"
      ],
      "metadata": {
        "id": "4oynaugtzu-t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_apple_cost #getting the total after inputing the varabiles "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "errYuvXP0Gf9",
        "outputId": "7d369e86-a225-4b6a-97d7-ecb5dd89b812"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.25"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cost_per_tee=5.50 #how to insert prices per item for given equation"
      ],
      "metadata": {
        "id": "vbgKKGlV0KyF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cost_per_shoe=10.00  #how to insert prices per item for given equation"
      ],
      "metadata": {
        "id": "hsGiGRg30Rws"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cost_per_shorts=6.00 #how to insert prices per item for given equation"
      ],
      "metadata": {
        "id": "S44b-eqr0aSD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tee_sold=12 #how to insert items sold for given eqaution"
      ],
      "metadata": {
        "id": "fLQNCMu00iLD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shoe_sold=9 #how to insert items sold for given eqaution"
      ],
      "metadata": {
        "id": "kvtIQoH00v9-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shorts_sold=7 #how to insert items sold for given eqaution"
      ],
      "metadata": {
        "id": "hrwCcjle00y2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_sales=(cost_per_tee*tee_sold)+(cost_per_shoe*shoe_sold)+(cost_per_shorts*shorts_sold) #equation to find total of all items sold x cost"
      ],
      "metadata": {
        "id": "ZZW9AoXv04Kf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_sales #answer to equation above"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bg8qpfyq1cEo",
        "outputId": "a0bec7b4-f2f7-4a88-8b25-88774dc26b5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "150.0"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_tee_sales=(cost_per_tee*tee_sold) #finding each individual item sold x cost"
      ],
      "metadata": {
        "id": "osZeJl-72gZX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_tee_sales #total sales for item"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KvLJuhMX2v0o",
        "outputId": "abb844e3-ee91-49f3-c478-5c594898bc90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18.0"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_shoe_sales=(cost_per_shoe*shoe_sold) #finding each individual item sold x cost"
      ],
      "metadata": {
        "id": "TPFlgFDo2yfQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_shoe_sales #total sales for item"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6JixYWtK3FXp",
        "outputId": "ccfc1f8a-9bbe-4a92-97bc-0606cff56dc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "90.0"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_shorts_sales=(cost_per_shorts*shorts_sold) #finding each individual item sold x cost"
      ],
      "metadata": {
        "id": "m0PDVlsn3HlX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_shorts_sales #total sales for item"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q_pRIhL63PLf",
        "outputId": "44f8da57-d3d3-466f-a878-d0e309416e8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "42.0"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#vectors"
      ],
      "metadata": {
        "id": "xAVcObs63TKg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np #converting numpy as np (domnain)\n"
      ],
      "metadata": {
        "id": "E_2uMjcO3V2v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt #making plt a figure \n"
      ],
      "metadata": {
        "id": "W1OPawHz3eDv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.arange(10) #range for 10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UEAVd54d3lmm",
        "outputId": "6a666a37-ab2a-4724-8c3e-84b85a3a8c45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.arange(10) #making a variable a range"
      ],
      "metadata": {
        "id": "Ikrl6UDb4ef0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ztrW4egQ4riF",
        "outputId": "ead61aca-550a-4f39-e634-22906bed3975"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x+1 #using addition equation to change the answer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCEhzib54uYF",
        "outputId": "0583db71-510d-4a10-8870-7748008c9899"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x*2 #using multiplication equation to change answer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZwhww544yVU",
        "outputId": "d19e6a78-f27c-4aca-b9bf-faf3ee047480"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x**2 #using squaring equation to change answer "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cwyhul0j406k",
        "outputId": "22f8efe6-a367-4865-fa74-d9e4a4f973c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=3*x+5 #adding new variable to equation"
      ],
      "metadata": {
        "id": "4nrib7fC434D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x #solving for x with given equation"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VrsgdK2u48j8",
        "outputId": "f820baec-0b61-4464-b55c-49bcac0b40ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y #solving for y with given eqaution"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Alya2SKx5BpU",
        "outputId": "59fb169b-d1c6-424b-c8e2-c126aedafe44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 5,  8, 11, 14, 17, 20, 23, 26, 29, 32])"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bSkUXLZ8NEl2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y) #straight line graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "j7RJw9aQ5DgM",
        "outputId": "7c3d23df-90c6-4272-823c-2c529952c17d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae2e4478d0>]"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,'.') #dotted graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "jBCxu3vu5VIV",
        "outputId": "b8d9956a-1e67-4c05-cfee-ef0934603ceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae0eeee290>]"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANbklEQVR4nO3db4hl9X3H8ffHXSV/LNXoINtVXE0kQQpZ4yCbWoLVpNi01ARKibQixbB5EFstQmt90rT0QQqJtg9E2Lg2QremQQ1KkDRiN0ig2s7o1n/b4nbrJGtXd2LWavugZt1vH8wdnB1nnLsz9865v7nvF1zuub977j1fDjsfzv7uOeebqkKS1J5Tui5AkrQ6BrgkNcoAl6RGGeCS1CgDXJIatXk9N3b22WfXtm3b1nOTktS86enpn1TVxOLxdQ3wbdu2MTU1tZ6blKTmJZlZatwpFElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1yShmx65ih37j3A9MzRgX7vup4HLknjZnrmKL9z9xO8dew4p20+hT1f3MGl5585kO/2CFyShuiJg6/x1rHjHC/42bHjPHHwtYF9twEuSUO048KzOG3zKWwKnLr5FHZceNbAvtspFEkaokvPP5M9X9zBEwdfY8eFZw1s+gQMcEkaukvPP3OgwT3PKRRJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSo1YM8CTvS/LPSf41yfNJ/qw3fkGSJ5McSPL3SU4bfrmSpHn9HIH/H3BlVX0c2A5cnWQH8JfAHVX1EeAocMPwypQkLbZigNec/+m9PLX3KOBK4P7e+L3A54ZSoSRpSX3NgSfZlGQfcAR4FPgP4PWqOtZb5RCwdZnP7kwylWRqdnZ2EDVLkugzwKvq7araDpwLXAZ8rN8NVNWuqpqsqsmJiYlVlilJWuykzkKpqteBvcAngTOSzN/N8Fzg5QHXJkl6D/2chTKR5Ize8vuBzwD7mQvy3+qtdj3w0LCKlCS9Wz/3A98C3JtkE3OB/+2q+m6SF4BvJfkL4Glg9xDrlCQtsmKAV9UzwCVLjB9kbj5ckkbS9MzRoXTCGRV25JG0IQ2zG/yo8FJ6SRvSMLvBjwoDXNKGNMxu8KPCKRRJG9Iwu8GPCgNc0oY1rG7wo8IpFElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSQM3PXOUO/ceYHrmaNelbGh25JE0UOPQDX5UeAQuaaDGoRv8qDDAJQ3UOHSDHxVOoUgaqHHoBj8qDHBJA7fRu8GPihWnUJKcl2RvkheSPJ/kpt74V5K8nGRf7/HZ4ZcrSZrXzxH4MeCWqnoqyc8B00ke7b13R1V9bXjlSZKWs2KAV9Vh4HBv+c0k+4Gtwy5MkvTeTuoslCTbgEuAJ3tDNyZ5Jsk9SZac8EqyM8lUkqnZ2dk1FStJekffAZ7kdOAB4OaqegO4C/gwsJ25I/SvL/W5qtpVVZNVNTkxMTGAkiVJ0GeAJzmVufDeU1UPAlTVq1X1dlUdB74BXDa8MiVJi/VzFkqA3cD+qrp9wfiWBat9Hnhu8OVJkpbTz1kolwPXAc8m2dcbuw24Nsl2oICXgC8NpUJJ0pL6OQvlh0CWeOuRwZcjSeqX90KRpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBri0gdgNfrzYkUfaIOwGP348Apc2CLvBjx8DXNog7AY/fpxCkTYIu8GPHwNc2kDsBj9enEKRpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUSsGeJLzkuxN8kKS55Pc1Bv/UJJHk7zYe/YmxJK0jvo5Aj8G3FJVFwM7gC8nuRi4FXisqi4CHuu9lsaS3eDVhRU78lTVYeBwb/nNJPuBrcA1wBW91e4FfgD88VCqlEaY3eDVlZOaA0+yDbgEeBI4pxfuAK8A5yzzmZ1JppJMzc7OrqFUaTTZDV5d6TvAk5wOPADcXFVvLHyvqgqopT5XVbuqarKqJicmJtZUrDSK7AavrvTV1DjJqcyF956qerA3/GqSLVV1OMkW4MiwipRGmd3g1ZUVAzxJgN3A/qq6fcFbDwPXA1/tPT80lAqlBtgNXl3o5wj8cuA64Nkk+3pjtzEX3N9OcgMwA/z2cEqUJC2ln7NQfghkmbevGmw5kqR+eSWmJDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAa6m2Q1e46yvlmrSKLIbvMadR+Bqlt3gNe4McDXLbvAad06hqFl2g9e4M8DVNLvBa5w5hSJJjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElq1IoBnuSeJEeSPLdg7CtJXk6yr/f47HDLlCQt1s8R+DeBq5cYv6Oqtvcejwy2LEnSSlYM8Kp6HPjpOtQiSToJa5kDvzHJM70plmVvRpFkZ5KpJFOzs7Nr2JwkaaHVBvhdwIeB7cBh4OvLrVhVu6pqsqomJyYmVrk5SdJiqwrwqnq1qt6uquPAN4DLBluWJGklqwrwJFsWvPw88Nxy60qShmPF+4EnuQ+4Ajg7ySHgT4ErkmwHCngJ+NIQa5QkLWHFAK+qa5cY3j2EWtSY6ZmjdsOROmRHHq2KHeGl7nkpvVbFjvBS9wxwrYod4aXuOYWiVbEjvNQ9A1yrZkd4qVtOoUhSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAN2h65ih37j3A9MzRrkuR1CE78jTGbvCS5nkE3hi7wUuaZ4A3xm7wkuY5hdIYu8FLmmeAN8hu8JKgjymUJPckOZLkuQVjH0ryaJIXe8+miSSts37mwL8JXL1o7Fbgsaq6CHis91qStI5WDPCqehz46aLha4B7e8v3Ap8bcF2SpBWs9iyUc6rqcG/5FeCc5VZMsjPJVJKp2dnZVW5OkrTYmk8jrKoC6j3e31VVk1U1OTExsdbNSZJ6VhvgrybZAtB7PjK4kiRJ/VhtgD8MXN9bvh54aDDlSJL61c9phPcB/wR8NMmhJDcAXwU+k+RF4NO915KkdbTihTxVde0yb1014FokSSfBe6FIUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA/wk2A1e0iixI0+f7AYvadR4BN4nu8FLGjUGeJ/sBi9p1DiF0ie7wUsaNQb4SbAbvKRR4hSKJDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjVrT/cCTvAS8CbwNHKuqyUEUJUla2SAaOvxKVf1kAN+zrOmZo3bCkaRFRr4jj93gJWlpa50DL+D7SaaT7FxqhSQ7k0wlmZqdnT3pDdgNXpKWttYA/+Wq+gTwa8CXk3xq8QpVtauqJqtqcmJi4qQ3YDd4SVramqZQqurl3vORJN8BLgMeH0Rh8+wGL0lLW3WAJ/kgcEpVvdlb/lXgzwdW2QJ2g5ekd1vLEfg5wHeSzH/P31XV9wZSlSRpRasO8Ko6CHx8gLVIkk6CV2JKUqMMcElqlAEuSY0ywCWpUamq9dtYMgvMrPLjZwNDvedKY9wf73BfnMj9caKNsD/Or6p3XQm5rgG+FkmmvNvhO9wf73BfnMj9caKNvD+cQpGkRhngktSolgJ8V9cFjBj3xzvcFydyf5xow+6PZubAJUknaukIXJK0gAEuSY1qIsCTXJ3k35McSHJr1/V0Jcl5SfYmeSHJ80lu6rqmUZBkU5Knk3y361q6luSMJPcn+bck+5N8suuaupLkD3t/J88luS/J+7quadBGPsCTbALuZK7rz8XAtUku7raqzhwDbqmqi4EdzHVBGtd9sdBNwP6uixgRfw18r6o+xtzdQsdyvyTZCvwBMFlVvwhsAr7QbVWDN/IBzlyXnwNVdbCq3gK+BVzTcU2dqKrDVfVUb/lN5v44t3ZbVbeSnAv8OnB317V0LcnPA58CdgNU1VtV9Xq3VXVqM/D+JJuBDwD/1XE9A9dCgG8Ffrzg9SHGPLQAkmwDLgGe7LaSzv0V8EfA8a4LGQEXALPA3/SmlO7udcsaO712j18DfgQcBv67qr7fbVWD10KAa5EkpwMPADdX1Rtd19OVJL8BHKmq6a5rGRGbgU8Ad1XVJcD/AmP5m1GSM5n7n/oFwC8AH0zyu91WNXgtBPjLwHkLXp/bGxtLSU5lLrz3VNWDXdfTscuB30zyEnNTa1cm+dtuS+rUIeBQVc3/r+x+5gJ9HH0a+M+qmq2qnwEPAr/UcU0D10KA/wtwUZILkpzG3A8RD3dcUycy14B0N7C/qm7vup6uVdWfVNW5VbWNuX8X/1hVG+4oq19V9Qrw4yQf7Q1dBbzQYUld+hGwI8kHen83V7EBf9BdS1PjdVFVx5LcCPwDc78k31NVz3dcVlcuB64Dnk2yrzd2W1U90mFNGi2/D+zpHewcBH6v43o6UVVPJrkfeIq5s7eeZgNeUu+l9JLUqBamUCRJSzDAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqP+HzFTDkMuoQCPAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,'r--') #red dashed line graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "XRjVhlkM6VRk",
        "outputId": "b7266fba-d8cb-415e-8560-97f328363d1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae0ee31e50>]"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,marker='o',\n",
        "linestyle='None',\n",
        "markerfacecolor='#B22222')#how we change the color of the graph using a hex code"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "kDn73fnR73Yf",
        "outputId": "f8cfa76c-bf64-41f3-b588-afaf927ff97b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae0ebdaf10>]"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.linspace(0,5,10) #range plot of points"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dEDYMWrG9vVr",
        "outputId": "7a876302-ad7c-45dc-e399-eb0c367ba06d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.55555556, 1.11111111, 1.66666667, 2.22222222,\n",
              "       2.77777778, 3.33333333, 3.88888889, 4.44444444, 5.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.linspace(0,10,100) #range plot of x"
      ],
      "metadata": {
        "id": "4C5oVCQw-GAa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y=x**2 #x squared = y"
      ],
      "metadata": {
        "id": "130x4B-q-Nzy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,marker='o',\n",
        "linestyle='None',\n",
        "markerfacecolor='#B22222') #same graph with different style because of the change in numbers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "eMk4pxuq-RMa",
        "outputId": "a772ba95-c24d-41fc-ca7b-115eb73ec491"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae0ebad750>]"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x #0-10 and all the numbers squared along the way"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BDRIOwv5-akp",
        "outputId": "874bfdec-11cd-4d6e-af0e-e2e129ef8b33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.        ,  0.1010101 ,  0.2020202 ,  0.3030303 ,  0.4040404 ,\n",
              "        0.50505051,  0.60606061,  0.70707071,  0.80808081,  0.90909091,\n",
              "        1.01010101,  1.11111111,  1.21212121,  1.31313131,  1.41414141,\n",
              "        1.51515152,  1.61616162,  1.71717172,  1.81818182,  1.91919192,\n",
              "        2.02020202,  2.12121212,  2.22222222,  2.32323232,  2.42424242,\n",
              "        2.52525253,  2.62626263,  2.72727273,  2.82828283,  2.92929293,\n",
              "        3.03030303,  3.13131313,  3.23232323,  3.33333333,  3.43434343,\n",
              "        3.53535354,  3.63636364,  3.73737374,  3.83838384,  3.93939394,\n",
              "        4.04040404,  4.14141414,  4.24242424,  4.34343434,  4.44444444,\n",
              "        4.54545455,  4.64646465,  4.74747475,  4.84848485,  4.94949495,\n",
              "        5.05050505,  5.15151515,  5.25252525,  5.35353535,  5.45454545,\n",
              "        5.55555556,  5.65656566,  5.75757576,  5.85858586,  5.95959596,\n",
              "        6.06060606,  6.16161616,  6.26262626,  6.36363636,  6.46464646,\n",
              "        6.56565657,  6.66666667,  6.76767677,  6.86868687,  6.96969697,\n",
              "        7.07070707,  7.17171717,  7.27272727,  7.37373737,  7.47474747,\n",
              "        7.57575758,  7.67676768,  7.77777778,  7.87878788,  7.97979798,\n",
              "        8.08080808,  8.18181818,  8.28282828,  8.38383838,  8.48484848,\n",
              "        8.58585859,  8.68686869,  8.78787879,  8.88888889,  8.98989899,\n",
              "        9.09090909,  9.19191919,  9.29292929,  9.39393939,  9.49494949,\n",
              "        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,marker='o',\n",
        "linestyle='None',\n",
        "markerfacecolor='#B22222')\n",
        "plt.title(\"my first graph\") #how we make the title for the graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "jKdq6NdR-cjD",
        "outputId": "8a816516-28bb-4141-d203-011874fe9156"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'my first graph')"
            ]
          },
          "metadata": {},
          "execution_count": 65
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,marker='o',\n",
        "linestyle='None',\n",
        "markerfacecolor='#B22222',label=\"graph of x squared\") #gives line a label\n",
        "plt.title(\"my first graph\") \n",
        "plt.xlabel(\"x axis label goes here\") #how to label axis x\n",
        "plt.ylabel(\"y axis label goes here\") #how to label axis y\n",
        "plt.legend() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "JrGrJnW4_8or",
        "outputId": "2e648253-9af7-4613-83e3-558572f8a688"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fae0eb76f10>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.linspace(0,2,100) #graph with new equations giving us 3 lines\n",
        "\n",
        "plt.plot(x,x, 'r--', label=\"linear\") #changed line to red dashed\n",
        "plt.plot(x,x**2, 'bs', label=\"squared\") #changed line to blue \n",
        "plt.plot(x,x**3, 'g^', label=\"cubed\") #changed line to green \n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "71ikHgwSAOhG",
        "outputId": "674e2db9-1e02-4f72-929a-e66f10d7ad88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fae0ea27e10>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names=['cat','dog','bird']"
      ],
      "metadata": {
        "id": "se8-t_YOEsC6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "names [0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "G3S2ZXyXE5rF",
        "outputId": "8766f0e1-bf9d-4df3-bb1f-1ab451cbb129"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cat'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names [1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "XqI8nmoDE_Pt",
        "outputId": "16661549-fa48-4475-f469-bdb5858ee10a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'dog'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names [2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "gav24gP-FBrd",
        "outputId": "b2c5d25e-efb8-42dd-ffac-56c17ed28cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'bird'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cbZkjHVoFEzl",
        "outputId": "cc096147-fbbb-4ebc-cd31-b623c469f1b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['cat', 'dog', 'bird']"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "values = [15,18,6]"
      ],
      "metadata": {
        "id": "6-ldOyIKFISu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AGOaC-92FPtm",
        "outputId": "9b67e382-5b12-4d44-f4a5-b2728316353c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[15, 18, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(1,figsize=(10,10)) #bar graph of names and values\n",
        "plt.subplot(1,3,1)\n",
        "plt.bar(names,values)\n",
        "\n",
        "plt.subplot (1,3,2) #scatter plot of names and values\n",
        "plt.scatter(names,values)\n",
        "\n",
        "plt.subplot(1,3,3) #line graph of names and values\n",
        "plt.plot(names,values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "7kW-rnozFRlI",
        "outputId": "39bba894-6f8d-4808-e323-af0e4d2accbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fae0e808150>]"
            ]
          },
          "metadata": {},
          "execution_count": 79
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# images"
      ],
      "metadata": {
        "id": "QQ5AZixtZcro"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "XPpoLc9maOvM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src= 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Oranges_-_whole-halved-segment.jpg/1200px-Oranges_-_whole-halved-segment.jpg'>"
      ],
      "metadata": {
        "id": "LahUUQhXadpm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# <img src ''> to put in image (in text box)"
      ],
      "metadata": {
        "id": "SXuTz2uhZlz6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "$y= m x + b$"
      ],
      "metadata": {
        "id": "ceItkPRXasZN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$\\frac{a}{b}$"
      ],
      "metadata": {
        "id": "VYpFxD2zbbyy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$a^b$"
      ],
      "metadata": {
        "id": "lvRvxjmVbvLD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$a_b$"
      ],
      "metadata": {
        "id": "9S8Tj33hcDez"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}$"
      ],
      "metadata": {
        "id": "aJ_AUGTZcGWd"
      }
    }
  ]
}
